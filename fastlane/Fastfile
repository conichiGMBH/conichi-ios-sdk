require 'fileutils'

fastlane_version "1.104.0"

default_platform :ios

platform :ios do

  ############################## PRE ##############################

  before_all do
    update_fastlane
    import_shared_fastfile
    load_environment_variables
  end

  ######################### PUBLIC LANES ##########################

  lane :release do |options|
    release_branch = ENV['GITHUB_RELEASE_BRANCH']

    ensure_git_status_clean
    ensure_git_branch(
      branch: release_branch
    )

    release_version = options[:release_version]
    private_sdk_release = get_github_release(
      url: ENV['PRIVATE_CONICHI_IOS_SDK_GITHUB_REPO'],
      version: release_version,
      api_token: ENV['CONICHI_CI_GITHUB_TOKEN']
    )

    update_changelog_from_release(
      release: private_sdk_release
    )

    cnisdk_framework_zip_path = "CNISDK.framework.zip"
    download_cnisdk_framework_zip_from_release(
      release: private_sdk_release,
      download_destination: cnisdk_framework_zip_path
    )

    unzip(file: cnisdk_framework_zip_path)
    copy_frameworks_from_cnisdk_framework_folder(
      cnisdk_framework_folder: "../Carthage/Build/iOS"
    )

    remote = ENV['GITHUB_REMOTE']

    upcoming_version = get_upcoming_version.clone
    upcoming_notes = get_upcoming_notes.clone
    put_upcoming_to_releases

    podspecs_version_bump(
      version: upcoming_version
    )

    tag_name = upcoming_version
    git_add_or_update_tag(
      tag_name: tag_name,
      remote: remote,
      branch: release_branch
    )

    push_to_git_remote(
      remote: remote,
      local_branch: release_branch,
      remote_branch: release_branch
    )

    podspecs_push

    set_or_update_github_release(
      release_name: tag_name,
      repository_name: ENV['GITHUB_REPOSITORY'],
      description: upcoming_notes,
      tag_name: tag_name,
      api_token: ENV['CONICHI_CI_GITHUB_TOKEN'],
      upload_assets: [cnisdk_framework_zip_path]
    )
  end

  ######################### PRIVATE LANES ##########################

  private_lane :podspecs_version_bump do |options|
    version = options[:version]
    version_bump_podspec(path: ENV['CORE_KIT_PODSPEC'], version_number: version)
    version_bump_podspec(path: ENV['PAYMENT_KIT_PODSPEC'], version_number: version)
    version_bump_podspec(path: ENV['GEOFENCING_KIT_PODSPEC'], version_number: version)
    version_bump_podspec(path: ENV['PMS_KIT_PODSPEC'], version_number: version)
  end

  private_lane :podspecs_push do
    pod_push(path: ENV['CORE_KIT_PODSPEC'], allow_warnings: true)
    pod_push(path: ENV['PAYMENT_KIT_PODSPEC'], allow_warnings: true)
    pod_push(path: ENV['GEOFENCING_KIT_PODSPEC'], allow_warnings: true)
    pod_push(path: ENV['PMS_KIT_PODSPEC'], allow_warnings: true)
  end

  private_lane :import_shared_fastfile do
    import_from_git(
      url: "git@github.com:#{ENV['GITHUB_IOS_TEAM_REPOSITORY']}",
      branch: 'HEAD',
      path: 'fastlane/Fastfile'
    )
  end

  private_lane :load_environment_variables do
    sh("source ~/.bash_profile")
  end

  private_lane :copy_frameworks_from_cnisdk_framework_folder do |options|
    cnisdk_framework_folder = options[:cnisdk_framework_folder]
    frameworks_to_copy = ["CNISDKCoreKit.framework", "CNISDKGeoFencingKit.framework",
                          "CNISDKPaymentKit.framework", "CNISDKPMSKit.framework",
                          "Conichi_Authentication.framework", "Conichi_Errors.framework",
                          "Conichi_Meta.framework", "PaylevenFramework.framework"]
    frameworks_to_copy.each do |framework|
      FileUtils.cp_r("#{cnisdk_framework_folder}/#{framework}", "../Frameworks")
    end
    unless git_status_clean?
      git_commit_shell(
        message: "conichi frameworks have been updated;"
      )
    end
  end

  private_lane :download_cnisdk_framework_zip_from_release do |options|
    release = options[:release]
    assets = release["assets"]
    selected_assets = assets.select do |asset|
      asset["name"] == "CNISDK.framework.zip"
    end
    cnisdk_framework_zip_asset = selected_assets[0]
    url = cnisdk_framework_zip_asset["url"]
    download_destination = options[:download_destination]
    cni_download_github_release_asset(
      asset_url: url,
      destination_path: download_destination,
      api_token: ENV['CONICHI_CI_GITHUB_TOKEN']
    )
  end

  private_lane :update_changelog_from_release do |options|
    require 'redcarpet'
    require 'redcarpet/render_strip'

    release = options[:release]
    release_version = release["tag_name"]

    markdown = Redcarpet::Markdown.new(Redcarpet::Render::StripDown)
    release_body_text = markdown.render(release["body"])
    release_changes = release_body_text.split("\n")

    changelog_data = get_changelog_data
    changelog_data["upcoming"]["version"] = release_version
    changelog_data["upcoming"]["notes"] = release_changes

    save_changelog_data(
      changelog_data: changelog_data
    )

    unless git_status_clean?
      git_commit_shell(
        message: "Update CHANGELOG with upcoming release information"
      )
    end
  end
end
